# -*- coding: utf-8 -*-
"""Задача 3.1.

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o3pV1U-ve5gTpM8d0WzJ7_EyK0ibqLMh

##Задача 3.1.
####Создайте класс матрицы (или таблицы).
####Требования к классу:
- каждая колонка является числом от 1 до n (n любое число, которые вы поставите!)
- в каждой ячейке содержится либо число, либо None
- доступы следующие методы матрицы:
** принимать новые значения, 
** заменять существующие значения, 
** выводить число строк и колонок.

####Пример матрицы 10 на 10 из единиц:
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
#####*Примечание! 
- новый класс не запрещено строить на базе существующих типов данных: списков, словарей и тд.
- отображать в таблице/матрице название колонки не обязательно!
- использовать готовые классы numpy.array() и pandas.DataFrame() запрещено!
- проявите фантазию :)
"""

class Matrix:
 def init(self, rows, cols):
  self.matrix = [[None for _ in range(cols)] for _ in range(rows)]
  self.rows = rows
  self.cols = cols
 def set_value(self, row, col, value):
    if row < self.rows and col < self.cols:
        self.matrix[row][col] = value
    else:
        print("Error: Invalid row or column number!")

def replace_value(self, row, col, value):
    if row < self.rows and col < self.cols:
        self.matrix[row][col] = value
    else:
        print("Error: Invalid row or column number!")

def get_rows_cols(self):
    return self.rows, self.cols

def print_matrix(self):
    for row in self.matrix:
        print(row)
    m = Matrix(10, 10)
    m.print_matrix()
    print()

    m.set_value(0, 0, 1)
    m.set_value(1, 1, 1)
    m.set_value(2, 2, 1)
    m.set_value(3, 3, 1)
    m.set_value(4, 4, 1)
    m.set_value(5, 5, 1)
    m.set_value(6, 6, 1)
    m.set_value(7, 7, 1)
    m.set_value(8, 8, 1)
    m.set_value(9, 9, 1)

    m.print_matrix()
    print()

    m.replace_value(3, 3, 2)
    m.replace_value(5, 5, 2)

    m.print_matrix()
    print()

    print("Rows: {}, Cols: {}".format(*m.get_rows_cols()))